{"version":3,"file":"main.umd.js","sources":["../src/main.ts"],"sourcesContent":["import path from 'path'\r\nimport { transformSync } from '@babel/core'\r\nimport { readFileSync, writeFileSync } from 'fs'\r\nimport babelPresetTypescript from '@babel/preset-typescript'\r\nimport babelPluginTransformModulesCommonjs from '@babel/plugin-transform-modules-commonjs'\r\nimport babelPluginTransformModulesUMD from '@babel/plugin-transform-modules-umd'\r\nimport babelPluginTransformModulesAMD from '@babel/plugin-transform-modules-amd'\r\nimport babelPluginTransformModulesSystemjs from '@babel/plugin-transform-modules-systemjs'\r\nimport minimatch from 'minimatch'\r\nimport globby from 'globby'\r\nimport { BabelPluginsParams, Entry, ModuleType } from './types'\r\nimport chokidar from 'chokidar'\r\n\r\nexport * from './types'\r\n\r\nexport const generateModules = (config: {\r\n  watch?: boolean\r\n  entries: Entry[]\r\n}) => {\r\n  const { cwd } = process\r\n  const entries = config.entries\r\n\r\n  const babelPluginsParams: BabelPluginsParams = {\r\n    module: {\r\n      plugin: null,\r\n      ext: '.mjs',\r\n    },\r\n    commonjs: {\r\n      plugin: babelPluginTransformModulesCommonjs,\r\n      ext: '.cjs',\r\n    },\r\n    umd: {\r\n      plugin: babelPluginTransformModulesUMD,\r\n      ext: '.umd.js',\r\n    },\r\n    amd: {\r\n      plugin: babelPluginTransformModulesAMD,\r\n      ext: '.amd.js',\r\n    },\r\n    systemjs: {\r\n      plugin: babelPluginTransformModulesSystemjs,\r\n      ext: '.system.js',\r\n    },\r\n  }\r\n\r\n  const btfs = (path: string): string => {\r\n    return path.replace(/\\\\/g, '/')\r\n  }\r\n\r\n  const transformModules = (filepath: string, { into }: Entry) => {\r\n    try {\r\n      const moduleTypes = typeof into === 'string' ? [into] : into\r\n      const { dir, name, base } = path.parse(filepath)\r\n      const fileContent = readFileSync(filepath, { encoding: 'utf8' })\r\n      Object.entries(babelPluginsParams)\r\n        .filter(([type]) => moduleTypes.includes(type as ModuleType))\r\n        .forEach(([_, { plugin, ext }]) => {\r\n          const transformedFileContent = transformSync(fileContent, {\r\n            presets: [babelPresetTypescript],\r\n            plugins: [plugin].filter(Boolean),\r\n            filename: base,\r\n          })?.code\r\n          const contentWithComments = `/**\r\n * This file is auto-generated by GenerateModulesWebpackPlugin.\r\n * Check this file into source control.\r\n * Do not edit this file.\r\n */\\n${transformedFileContent}\\n/* End of auto-generated content. */\\n`\r\n          writeFileSync(path.join(dir, name) + ext, contentWithComments)\r\n        })\r\n    } catch (e: any) {\r\n      console.error(\r\n        `TransformModulesWebpackPlugin: Couldn't transform module (${filepath}) - ${e.message}`,\r\n      )\r\n    }\r\n  }\r\n\r\n  const transformFile = (filePath: string) => {\r\n    const patternOptions = entries.find(({ pattern }) => {\r\n      const target = btfs(path.resolve(cwd(), filePath))\r\n      const resolvedPattern = btfs(path.resolve(cwd(), pattern))\r\n      return minimatch(target, resolvedPattern)\r\n    })\r\n    if (patternOptions) {\r\n      transformModules(filePath, patternOptions)\r\n    }\r\n  }\r\n  const initialTransform = () =>\r\n    transformFiles(globby.sync(entries.map(({ pattern }) => pattern)))\r\n  const transformFiles = (files: string[]) =>\r\n    files.forEach((file) => transformFile(file))\r\n\r\n  if (config.watch) {\r\n    const watcher = chokidar.watch(\r\n      entries.map(({ pattern }) => pattern),\r\n      {\r\n        ignored: /^\\./,\r\n        cwd: cwd(),\r\n      },\r\n    )\r\n    watcher\r\n      .on('add', (filePath) => transformFile(filePath))\r\n      .on('change', (filePath) => transformFile(filePath))\r\n      .on('ready', () => initialTransform())\r\n  } else {\r\n    initialTransform()\r\n  }\r\n}\r\n"],"names":["generateModules","config","cwd","process","entries","babelPluginsParams","module","plugin","ext","commonjs","babelPluginTransformModulesCommonjs","umd","babelPluginTransformModulesUMD","amd","babelPluginTransformModulesAMD","systemjs","babelPluginTransformModulesSystemjs","btfs","path","replace","transformModules","filepath","into","moduleTypes","dir","name","base","parse","fileContent","readFileSync","encoding","Object","filter","type","includes","forEach","_","_transformSync","transformedFileContent","transformSync","presets","babelPresetTypescript","plugins","Boolean","filename","code","contentWithComments","writeFileSync","join","e","console","error","message","transformFile","filePath","patternOptions","find","pattern","target","resolve","resolvedPattern","minimatch","initialTransform","transformFiles","globby","sync","map","files","file","watch","watcher","chokidar","ignored","on"],"mappings":"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"}