(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('path'), require('@babel/core'), require('fs'), require('@babel/preset-typescript'), require('@babel/plugin-transform-modules-commonjs'), require('@babel/plugin-transform-modules-umd'), require('@babel/plugin-transform-modules-amd'), require('@babel/plugin-transform-modules-systemjs'), require('minimatch'), require('globby'), require('chokidar')) :
  typeof define === 'function' && define.amd ? define(['exports', 'path', '@babel/core', 'fs', '@babel/preset-typescript', '@babel/plugin-transform-modules-commonjs', '@babel/plugin-transform-modules-umd', '@babel/plugin-transform-modules-amd', '@babel/plugin-transform-modules-systemjs', 'minimatch', 'globby', 'chokidar'], factory) :
  (global = global || self, factory(global.generateModules = {}, global.path, global.core, global.fs, global.babelPresetTypescript, global.babelPluginTransformModulesCommonjs, global.babelPluginTransformModulesUMD, global.babelPluginTransformModulesAMD, global.babelPluginTransformModulesSystemjs, global.minimatch, global.globby, global.chokidar));
})(this, (function (exports, path, core, fs, babelPresetTypescript, babelPluginTransformModulesCommonjs, babelPluginTransformModulesUMD, babelPluginTransformModulesAMD, babelPluginTransformModulesSystemjs, minimatch, globby, chokidar) {
  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
  var babelPresetTypescript__default = /*#__PURE__*/_interopDefaultLegacy(babelPresetTypescript);
  var babelPluginTransformModulesCommonjs__default = /*#__PURE__*/_interopDefaultLegacy(babelPluginTransformModulesCommonjs);
  var babelPluginTransformModulesUMD__default = /*#__PURE__*/_interopDefaultLegacy(babelPluginTransformModulesUMD);
  var babelPluginTransformModulesAMD__default = /*#__PURE__*/_interopDefaultLegacy(babelPluginTransformModulesAMD);
  var babelPluginTransformModulesSystemjs__default = /*#__PURE__*/_interopDefaultLegacy(babelPluginTransformModulesSystemjs);
  var minimatch__default = /*#__PURE__*/_interopDefaultLegacy(minimatch);
  var globby__default = /*#__PURE__*/_interopDefaultLegacy(globby);
  var chokidar__default = /*#__PURE__*/_interopDefaultLegacy(chokidar);

  const generateModules = config => {
    const {
      cwd
    } = process;
    const entries = config.entries;
    const babelPluginsParams = {
      module: {
        plugin: null,
        ext: '.mjs'
      },
      commonjs: {
        plugin: babelPluginTransformModulesCommonjs__default["default"],
        ext: '.cjs'
      },
      umd: {
        plugin: babelPluginTransformModulesUMD__default["default"],
        ext: '.umd.js'
      },
      amd: {
        plugin: babelPluginTransformModulesAMD__default["default"],
        ext: '.amd.js'
      },
      systemjs: {
        plugin: babelPluginTransformModulesSystemjs__default["default"],
        ext: '.system.js'
      }
    };
    const btfs = path => {
      return path.replace(/\\/g, '/');
    };
    const transformModules = (filepath, {
      into
    }) => {
      try {
        const moduleTypes = typeof into === 'string' ? [into] : into;
        const {
          dir,
          name,
          base
        } = path__default["default"].parse(filepath);
        const fileContent = fs.readFileSync(filepath, {
          encoding: 'utf8'
        });
        Object.entries(babelPluginsParams).filter(([type]) => moduleTypes.includes(type)).forEach(([_, {
          plugin,
          ext
        }]) => {
          var _transformSync;
          const transformedFileContent = (_transformSync = core.transformSync(fileContent, {
            presets: [babelPresetTypescript__default["default"]],
            plugins: [plugin].filter(Boolean),
            filename: base
          })) == null ? void 0 : _transformSync.code;
          const contentWithComments = `/**
 * This file is auto-generated by GenerateModulesWebpackPlugin.
 * Check this file into source control.
 * Do not edit this file.
 */\n${transformedFileContent}\n/* End of auto-generated content. */\n`;
          fs.writeFileSync(path__default["default"].join(dir, name) + ext, contentWithComments);
        });
      } catch (e) {
        console.error(`TransformModulesWebpackPlugin: Couldn't transform module (${filepath}) - ${e.message}`);
      }
    };
    const transformFile = filePath => {
      const patternOptions = entries.find(({
        pattern
      }) => {
        const target = btfs(path__default["default"].resolve(cwd(), filePath));
        const resolvedPattern = btfs(path__default["default"].resolve(cwd(), pattern));
        return minimatch__default["default"](target, resolvedPattern);
      });
      if (patternOptions) {
        transformModules(filePath, patternOptions);
      }
    };
    const initialTransform = () => transformFiles(globby__default["default"].sync(entries.map(({
      pattern
    }) => pattern)));
    const transformFiles = files => files.forEach(file => transformFile(file));
    if (config.watch) {
      const watcher = chokidar__default["default"].watch(entries.map(({
        pattern
      }) => pattern), {
        ignored: /^\./,
        cwd: cwd()
      });
      watcher.on('add', filePath => transformFile(filePath)).on('change', filePath => transformFile(filePath)).on('ready', () => initialTransform());
    } else {
      initialTransform();
    }
  };

  exports.generateModules = generateModules;

}));
//# sourceMappingURL=main.umd.js.map
